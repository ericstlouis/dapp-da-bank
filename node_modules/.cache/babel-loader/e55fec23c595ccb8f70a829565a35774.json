{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport './App.css';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport { useState, useEffect, useLocalStorage } from 'react';\nimport { bankContract, tokenContract } from './contract-address.json';\nimport Bank from './artifacts/contracts/Bank.sol/Bank.json';\nimport Token from './artifacts/contracts/Token.sol/Token.json';\n\nfunction App() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //States\n  const [vault, setVault] = useState();\n  const [userAssets, setUserAssets] = useState();\n  useEffect(() => {\n    loadVault();\n  }, []);\n\n  async function loadVault() {\n    const provider = new ethers.providers.JsonRpcProvider();\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, provider);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, provider);\n    const bankAssets = ethers.utils.formatEther(await bankInfo.totalAssets(), 'ether');\n    console.log(bankAssets);\n  } //Connect to wallet\n\n\n  async function ConnectToWallet() {\n    _s();\n\n    const [connectedACC, setConnectedACC, remove] = useLocalStorage(\"address\", \"connect to wallet\");\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(connection);\n    setConnectedACC(connection.selectedAddress);\n  }\n\n  _s(ConnectToWallet, \"+SyhO/LXVWTb46OyT4akc1CHznA=\", false, function () {\n    return [useLocalStorage];\n  });\n}\n\n_s2(App, \"/5BVGWzYQqPmaekiHm7y4vWe2cc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/web_development/da-bank/src/App.js"],"names":["Web3Modal","ethers","useState","useEffect","useLocalStorage","bankContract","tokenContract","Bank","Token","App","vault","setVault","userAssets","setUserAssets","loadVault","provider","providers","JsonRpcProvider","bankInfo","Contract","abi","tokenInfo","bankAssets","utils","formatEther","totalAssets","console","log","ConnectToWallet","connectedACC","setConnectedACC","remove","web3Modal","connection","connect","Web3Provider","selectedAddress"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,eAA9B,QAAqD,OAArD;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,yBAA1C;AACA,OAAOC,IAAP,MAAiB,0CAAjB;AACA,OAAOC,KAAP,MAAkB,4CAAlB;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAAA;;AACb;AACA,QAAM,CAACC,KAAD,EAASC,QAAT,IAAqBT,QAAQ,EAAnC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,SAAf,GAA2B;AACzB,UAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,SAAP,CAAiBC,eAArB,EAAjB;AACA,UAAMC,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,QAAX,CAAoBd,YAApB,EAAkCE,IAAI,CAACa,GAAvC,EAA4CL,QAA5C,CAAjB;AACA,UAAMM,SAAS,GAAG,IAAIpB,MAAM,CAACkB,QAAX,CAAoBb,aAApB,EAAmCE,KAAK,CAACY,GAAzC,EAA8CL,QAA9C,CAAlB;AACA,UAAMO,UAAU,GAAGrB,MAAM,CAACsB,KAAP,CAAaC,WAAb,CAAyB,MAAMN,QAAQ,CAACO,WAAT,EAA/B,EAAuD,OAAvD,CAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACD,GAdY,CAgBb;;;AACA,iBAAeM,eAAf,GAAiC;AAAA;;AAC/B,UAAM,CAACC,YAAD,EAAeC,eAAf,EAAgCC,MAAhC,IAA0C3B,eAAe,CAAC,SAAD,EAAY,mBAAZ,CAA/D;AACA,UAAM4B,SAAS,GAAG,IAAIhC,SAAJ,EAAlB;AACA,UAAMiC,UAAU,GAAG,MAAMD,SAAS,CAACE,OAAV,EAAzB;AACA,UAAMnB,QAAQ,GAAG,IAAId,MAAM,CAACe,SAAP,CAAiBmB,YAArB,CAAkCF,UAAlC,CAAjB;AACAH,IAAAA,eAAe,CAACG,UAAU,CAACG,eAAZ,CAAf;AAGD;;AAzBY,KAiBER,eAjBF;AAAA,YAkBqCxB,eAlBrC;AAAA;AA6Bd;;IA7BQK,G;;KAAAA,G;AA+BT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport { useState, useEffect, useLocalStorage } from 'react';\nimport {bankContract, tokenContract} from './contract-address.json';\nimport Bank from './artifacts/contracts/Bank.sol/Bank.json';\nimport Token from './artifacts/contracts/Token.sol/Token.json';\n\n\nfunction App() {\n  //States\n  const [vault , setVault] = useState();\n  const [userAssets, setUserAssets] = useState();\n  useEffect(() => {\n    loadVault()\n  }, [])\n\n  async function loadVault() {\n    const provider = new ethers.providers.JsonRpcProvider();\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, provider);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, provider);\n    const bankAssets = ethers.utils.formatEther(await bankInfo.totalAssets(), 'ether');\n    console.log(bankAssets)\n  }\n\n  //Connect to wallet\n  async function ConnectToWallet() {\n    const [connectedACC, setConnectedACC, remove] = useLocalStorage(\"address\", \"connect to wallet\");\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(connection)\n    setConnectedACC(connection.selectedAddress);\n\n\n  }\n\n\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}