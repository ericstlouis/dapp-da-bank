{"ast":null,"code":"var _jsxFileName = \"C:\\\\web_development\\\\da-bank\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport { bankContract, tokenContract } from './contract-address.json';\nimport Bank from './artifacts/contracts/Bank.sol/Bank.json';\nimport Token from './artifacts/contracts/Token.sol/Token.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //States\n  const [depositAmount, setDepositAmount] = useState(\"\");\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [WalletConnected, setWalletConnect] = useState(\"connect to wallet\");\n  const [vault, setVault] = useState();\n  const [userAssets, setUserAssets] = useState();\n  useEffect(() => {\n    connectt;\n  }, []); //Connect to wallet\n\n  async function connectToWallet() {\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, provider);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, provider);\n    const bankAssets = ethers.utils.formatEther(await bankInfo.totalAssets(), 'ether');\n    const userAssets = ethers.utils.formatEther(await bankInfo.accounts(await signer.getAddress()));\n    const totalTokens = ethers.utils.formatEther(await tokenInfo.balanceOf(await signer.getAddress()));\n    console.log(connection.selectedAddress);\n    console.log(bankAssets);\n    console.log(userAssets);\n    console.log(totalTokens);\n  }\n\n  async function deposit(event) {\n    event.preventDefault();\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, signer);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, signer);\n    const tx = await bankInfo.deposit({\n      value: ethers.utils.parseEther(depositAmount.toString())\n    });\n    await tx.wait();\n  }\n\n  async function withdraw(event) {\n    event.preventDefault();\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, signer);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, signer);\n    const tx = await bankInfo.withdraw(ethers.utils.parseEther(withdrawAmount.toString()), tokenContract);\n    await tx.wait();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"\",\n        children: \"DA BANK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A decentralized bank\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectToWallet(),\n        children: WalletConnected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: deposit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Deposit:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"depositAmount\",\n            value: depositAmount,\n            onChange: e => setDepositAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: withdraw,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Withdrawal:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            name: \"withdrawalAmount\",\n            value: withdrawAmount,\n            onChange: e => setWithdrawAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"VznZZtmYG3dvHFS9l9oI4fNY/oo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/web_development/da-bank/src/App.js"],"names":["Web3Modal","ethers","useState","useEffect","bankContract","tokenContract","Bank","Token","App","depositAmount","setDepositAmount","withdrawAmount","setWithdrawAmount","WalletConnected","setWalletConnect","vault","setVault","userAssets","setUserAssets","connectt","connectToWallet","web3Modal","connection","connect","provider","providers","Web3Provider","window","ethereum","signer","getSigner","bankInfo","Contract","abi","tokenInfo","bankAssets","utils","formatEther","totalAssets","accounts","getAddress","totalTokens","balanceOf","console","log","selectedAddress","deposit","event","preventDefault","tx","value","parseEther","toString","wait","withdraw","e","target"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAAQC,YAAR,EAAsBC,aAAtB,QAA0C,yBAA1C;AACA,OAAOC,IAAP,MAAiB,0CAAjB;AACA,OAAOC,KAAP,MAAkB,4CAAlB;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACW,eAAD,EAAkBC,gBAAlB,IAAsCZ,QAAQ,CAAC,mBAAD,CAApD;AACA,QAAM,CAACa,KAAD,EAASC,QAAT,IAAqBd,QAAQ,EAAnC;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,EAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT,CAPa,CAYb;;AACA,iBAAeC,eAAf,GAAiC;AAC/B,UAAMC,SAAS,GAAG,IAAIrB,SAAJ,EAAlB;AACA,UAAMsB,UAAU,GAAG,MAAMD,SAAS,CAACE,OAAV,EAAzB;AACA,UAAMC,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAI9B,MAAM,CAAC+B,QAAX,CAAoB5B,YAApB,EAAkCE,IAAI,CAAC2B,GAAvC,EAA4CT,QAA5C,CAAjB;AACA,UAAMU,SAAS,GAAG,IAAIjC,MAAM,CAAC+B,QAAX,CAAoB3B,aAApB,EAAmCE,KAAK,CAAC0B,GAAzC,EAA8CT,QAA9C,CAAlB;AACA,UAAMW,UAAU,GAAGlC,MAAM,CAACmC,KAAP,CAAaC,WAAb,CAAyB,MAAMN,QAAQ,CAACO,WAAT,EAA/B,EAAuD,OAAvD,CAAnB;AACA,UAAMrB,UAAU,GAAGhB,MAAM,CAACmC,KAAP,CAAaC,WAAb,CAAyB,MAAMN,QAAQ,CAACQ,QAAT,CAAkB,MAAMV,MAAM,CAACW,UAAP,EAAxB,CAA/B,CAAnB;AACA,UAAMC,WAAW,GAAGxC,MAAM,CAACmC,KAAP,CAAaC,WAAb,CAAyB,MAAMH,SAAS,CAACQ,SAAV,CAAoB,MAAMb,MAAM,CAACW,UAAP,EAA1B,CAA/B,CAApB;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYtB,UAAU,CAACuB,eAAvB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY3B,UAAZ;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACD;;AAED,iBAAeK,OAAf,CAAuBC,KAAvB,EAA8B;AAC5BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAM3B,SAAS,GAAG,IAAIrB,SAAJ,EAAlB;AACA,UAAMsB,UAAU,GAAG,MAAMD,SAAS,CAACE,OAAV,EAAzB;AACA,UAAMC,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAI9B,MAAM,CAAC+B,QAAX,CAAoB5B,YAApB,EAAkCE,IAAI,CAAC2B,GAAvC,EAA4CJ,MAA5C,CAAjB;AACA,UAAMK,SAAS,GAAG,IAAIjC,MAAM,CAAC+B,QAAX,CAAoB3B,aAApB,EAAmCE,KAAK,CAAC0B,GAAzC,EAA8CJ,MAA9C,CAAlB;AACA,UAAMoB,EAAE,GAAG,MAAMlB,QAAQ,CAACe,OAAT,CACf;AAACI,MAAAA,KAAK,EAAEjD,MAAM,CAACmC,KAAP,CAAae,UAAb,CAAwB1C,aAAa,CAAC2C,QAAd,EAAxB;AAAR,KADe,CAAjB;AAEA,UAAMH,EAAE,CAACI,IAAH,EAAN;AACD;;AAED,iBAAeC,QAAf,CAAwBP,KAAxB,EAA+B;AAC7BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAM3B,SAAS,GAAG,IAAIrB,SAAJ,EAAlB;AACA,UAAMsB,UAAU,GAAG,MAAMD,SAAS,CAACE,OAAV,EAAzB;AACA,UAAMC,QAAQ,GAAG,IAAIvB,MAAM,CAACwB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACA,UAAMC,QAAQ,GAAG,IAAI9B,MAAM,CAAC+B,QAAX,CAAoB5B,YAApB,EAAkCE,IAAI,CAAC2B,GAAvC,EAA4CJ,MAA5C,CAAjB;AACA,UAAMK,SAAS,GAAG,IAAIjC,MAAM,CAAC+B,QAAX,CAAoB3B,aAApB,EAAmCE,KAAK,CAAC0B,GAAzC,EAA8CJ,MAA9C,CAAlB;AACA,UAAMoB,EAAE,GAAG,MAAMlB,QAAQ,CAACuB,QAAT,CAChBrD,MAAM,CAACmC,KAAP,CAAae,UAAb,CAAwBxC,cAAc,CAACyC,QAAf,EAAxB,CADgB,EAEhB/C,aAFgB,CAAjB;AAIC,UAAM4C,EAAE,CAACI,IAAH,EAAN;AACF;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,EAAlB;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAMjC,eAAe,EAAtC;AAAA,kBAA2CP;AAA3C;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE;AAAM,QAAA,QAAQ,EAAEiC,OAAhB;AAAA,gCACE;AAAA,8CAEE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,IAAI,EAAC,eAFP;AAGE,YAAA,KAAK,EAAErC,aAHT;AAIE,YAAA,QAAQ,EAAG8C,CAAD,IAAO7C,gBAAgB,CAAC6C,CAAC,CAACC,MAAF,CAASN,KAAV;AAJnC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAkBE;AAAM,QAAA,QAAQ,EAAEI,QAAhB;AAAA,gCACE;AAAA,iDAEE;AACE,YAAA,IAAI,EAAC,QADP;AAEE,YAAA,IAAI,EAAC,kBAFP;AAGE,YAAA,KAAK,EAAE3C,cAHT;AAIE,YAAA,QAAQ,EAAG4C,CAAD,IAAO3C,iBAAiB,CAAC2C,CAAC,CAACC,MAAF,CAASN,KAAV;AAJpC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GA7FQ1C,G;;KAAAA,G;AA+FT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Web3Modal from 'web3modal';\nimport { ethers } from 'ethers';\nimport { useState, useEffect } from 'react';\nimport {bankContract, tokenContract} from './contract-address.json';\nimport Bank from './artifacts/contracts/Bank.sol/Bank.json';\nimport Token from './artifacts/contracts/Token.sol/Token.json';\n\n\nfunction App() {\n  //States\n  const [depositAmount, setDepositAmount] = useState(\"\")\n  const [withdrawAmount, setWithdrawAmount] = useState(\"\");\n  const [WalletConnected, setWalletConnect] = useState(\"connect to wallet\");\n  const [vault , setVault] = useState();\n  const [userAssets, setUserAssets] = useState();\n  useEffect(() => {\n    connectt\n  }, [])\n\n\n  //Connect to wallet\n  async function connectToWallet() {\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner()\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, provider);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, provider);\n    const bankAssets = ethers.utils.formatEther(await bankInfo.totalAssets(), 'ether');\n    const userAssets = ethers.utils.formatEther(await bankInfo.accounts(await signer.getAddress()))\n    const totalTokens = ethers.utils.formatEther(await tokenInfo.balanceOf(await signer.getAddress()))\n\n    console.log(connection.selectedAddress);\n    console.log(bankAssets);\n    console.log(userAssets);\n    console.log(totalTokens);\n  }\n\n  async function deposit(event) {\n    event.preventDefault();\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner()\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, signer);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, signer);\n    const tx = await bankInfo.deposit(\n      {value: ethers.utils.parseEther(depositAmount.toString())});\n    await tx.wait();\n  }\n\n  async function withdraw(event) {\n    event.preventDefault();\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const bankInfo = new ethers.Contract(bankContract, Bank.abi, signer);\n    const tokenInfo = new ethers.Contract(tokenContract, Token.abi, signer);\n    const tx = await bankInfo.withdraw( \n     ethers.utils.parseEther(withdrawAmount.toString()),\n     tokenContract\n     );\n     await tx.wait();\n  }\n\n  return (\n    <div className=\"\">\n      <header className=\"\">\n        <h1 className=\"\">DA BANK</h1>\n        <p>A decentralized bank</p>\n        <button onClick={() => connectToWallet()}>{WalletConnected}</button>\n\n        <form onSubmit={deposit}>\n          <label>\n            Deposit:\n            <input\n              type=\"number\"\n              name=\"depositAmount\"\n              value={depositAmount}\n              onChange={(e) => setDepositAmount(e.target.value)}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n\n        <form onSubmit={withdraw}>\n          <label>\n            Withdrawal:\n            <input\n              type=\"number\"\n              name=\"withdrawalAmount\"\n              value={withdrawAmount}\n              onChange={(e) => setWithdrawAmount(e.target.value)}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}